version: '3.8'

services:
  database:
    container_name: database
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    env_file:
      - .env
    ports:
      - "${PGPORT}:5432"
      
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    command: server --console-address ":9001" /data/
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-storage:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    env_file:
      - .env
    ports:
      - 9000:9000
      - 9001:9001

  mc:
      image: minio/mc:latest
      depends_on:
          - minio
      container_name: mc
      env_file:
        - .env
      entrypoint: >
          /bin/sh -c "
          until (/usr/bin/mc config host add minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
          /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
          /usr/bin/mc mb minio/mlflow;
          /usr/bin/mc mb minio/mrbeam;
          exit 0;
          "

  mlservice:
    container_name: mlservice
    build:
      context: ./ml-service
      dockerfile: ./Dockerfile
    command: bash -c "python -m app.app"
    env_file:
      - .env
    ports:
      - "8011:8011"
    volumes:
      - ${PWD}/ml-service/weights:/weights

  api:
    container_name: api
    restart: unless-stopped
    build:
      context: ./api
      dockerfile: ./Dockerfile
    command: bash -c "./api"
    depends_on:
      - database
      - minio
      - mlservice
    env_file:
      - .env
    ports:
      - "8001:8001"

volumes:
  minio-storage:
